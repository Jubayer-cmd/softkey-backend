generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String       @id @default(uuid())
  name      String
  email     String       @unique
  password  String
  image     String?
  role      Role?        @default(user)
  contactNo String
  address   String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  reviews   UserReview[] // Reviews written by the user
  orders    Order[] // Orders placed by the user
  Blog      Blog[]

  @@map("user")
}

model Service {
  id          String       @id @default(uuid())
  name        String
  description String?
  image       String?
  UserReview  UserReview[] // Establish the relationship with user reviews.

  @@map("service")
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String?
  products    Product[] // Products belonging to the category

  @@map("category")
}

model Product {
  id          String       @id @default(uuid())
  name        String
  description String?
  image       String?
  price       Float
  Category    Category?    @relation(fields: [categoryId], references: [id])
  categoryId  String?
  UserReview  UserReview[] // Establish the relationship with user reviews.
  Order       Order?       @relation(fields: [orderId], references: [id])
  orderId     String?
  stock       Boolean
  quantity    Int
  saleCount   Int

  @@map("product")
}

model UserReview {
  id        String   @id @default(uuid())
  rating    Int
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  serviceId String
  service   Service  @relation(fields: [serviceId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@map("user_review")
}

model Order {
  id          String      @id @default(uuid())
  orderDate   DateTime
  totalAmount Float
  status      OrderStatus
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  products    Product[]

  @@map("order")
}

model Blog {
  id        String   @id @default(uuid())
  title     String
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("blog")
}

enum Role {
  superadmin
  admin
  user
}

enum OrderStatus {
  pending
  confirmed
  shipped
  delivered
  canceled
}
